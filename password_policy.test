<?php
/**
 * @file
 * Unit tests for Password policy module.
 */

/**
 * Basic test class for creating and executing Password Policies.
 */
class PasswordPolicyTestCase extends DrupalWebTestCase {

  /**
   * Implements DrupalWebTestCase::getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Password Policy Test',
      'description' => t('Assure that password policies work.'),
      'group' => 'Password Policy',
    );
  }

  /**
   * Implements DrupalWebTestCase::setUp().
   */
  public function setUp() {
    parent::setUp('password_policy', 'password_policy_test');
    $this->account = $this->drupalCreateUser();
    $this->createTestPolicy();
  }

  /**
   * Tests the creation of an empty policy.
   */
  public function testCreatePolicy() {
    $this->assertNotNull($this->policy, t('Test password policy created successfully.'));
  }

  /**
   * Tests the loading of CTools-based policies.
   */
  public function testLoadPolicy() {
    // Check for a policy contained in the Password Policy Test module.
    $policies = PasswordPolicy::enabled_policies();
    $this->assertTrue(array_key_exists('Test policy', $policies), t('Test policy exists when loaded via CTools.'));
  }

  protected function createTestPolicy($config = array()) {
    $policy = new stdClass();
    $policy->disabled = FALSE;
    $policy->api_version = 1;
    $policy->name = 'Test policy';
    $policy->config = serialize($config);

    $this->policy = new PasswordPolicy($policy);
  }

}

/**
 * Test class to verify accuracy of each available policy constraint.
 */
class PasswordPolicyConstraintsTestCase extends PasswordPolicyTestCase {

  /**
   * Implements DrupalWebTestCase::getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Constraints Test',
      'description' => t('Assure that password policy constraints work.'),
      'group' => 'Password Policy',
    );
  }

  /**
   * Implements DrupalWebTestCase::setUp().
   */
  public function setUp() {
    parent::setUp('password_policy', 'password_policy_test');
    $this->account = $this->drupalCreateUser();
  }

  /**
   * Tests case sensitivity constraint.
   */
  public function testAlphaCaseConstraint() {
    $config = array('alpha_case' => array(
      'alpha_case' => TRUE,
    ));
    $this->createTestPolicy($config);
    $this->assertFalse($this->checkPolicy('A'), t('Case sensivity constraint fails with only upper case letters.'), t('Constraint'));
    $this->assertFalse($this->checkPolicy('a'), t('Case sensivity fails with only lower case letters.'), t('Constraint'));
    $this->assertTrue($this->checkPolicy('Aa'), t('Case sensivity constraint passes with both lower and upper case letters.'), t('Constraint'));
  }

  /**
   * Tests letter count constraint.
   */
  public function testAlphaCountConstraint() {
    $config = array('alpha_count' => array(
      'alpha_count' => 1,
    ));
    $this->createTestPolicy($config);
    $this->assertFalse($this->checkPolicy(''), t('Letter count constraint fails with less than required letters.'), t('Constraint'));
    $this->assertTrue($this->checkPolicy('a'), t('Letter count constraint passes with minimum required letters.'), t('Constraint'));
    $this->assertTrue($this->checkPolicy('a1'), t('Letter count constraint passes with more than required letters.'), t('Constraint'));
  }

  /**
   * Tests character count constraint.
   */
  public function testCharCountConstraint() {
    $config = array('char_count' => array(
      'char_count' => 1,
    ));
    $this->createTestPolicy($config);
    $this->assertFalse($this->checkPolicy(''), t('Character count constraint fails with less than required characters.'), t('Constraint'));
    $this->assertTrue($this->checkPolicy('a'), t('Character count constraint passes with minimum required characters.'), t('Constraint'));
    $this->assertTrue($this->checkPolicy('ab'), t('Character count constraint passes with more than required characters.'), t('Constraint'));
  }

  /**
   * Tests consecutive count constraint.
   */
  public function testConsecutiveConstraint() {
    $config = array('consecutive' => array(
      'consecutive_char_count' => 1,
    ));
    $this->createTestPolicy($config);
    $this->assertTrue($this->checkPolicy(''), t('Consecutive character count constraint passes with less than maximum consecutive characters.'), t('Constraint'));
    $this->assertFalse($this->checkPolicy('a'), t('Consecutive character count constraint fails with exact maximum consecutive characters.'), t('Constraint'));
    $this->assertFalse($this->checkPolicy('aa'), t('Consecutive character count constraint fails with more than maximum consecutive characters.'), t('Constraint'));
  }

  /**
   * Tests integer count constraint.
   */
  public function testIntCountConstraint() {
    $config = array('int_count' => array(
      'int_count' => 1,
    ));
    $this->createTestPolicy($config);
    $this->assertFalse($this->checkPolicy(''), t('Integer count constraint fails with less than required integers.'), t('Constraint'));
    $this->assertTrue($this->checkPolicy('1'), t('Integer count constraint passes with minimum required integers.'), t('Constraint'));
    $this->assertTrue($this->checkPolicy('12'), t('Integer count constraint passes with more than required integers.'), t('Constraint'));
  }

  /**
   * Tests symbol count constraint.
   */
  public function testSymbolCountConstraint() {
    $config = array('symbol_count' => array(
      'symbol_count' => 1,
    ));
    $this->createTestPolicy($config);
    $this->assertFalse($this->checkPolicy('a'), t('Symbol count constraint fails with less than required symbols.'), t('Constraint'));
    $this->assertTrue($this->checkPolicy('a$'), t('Symbol count constraint passes with minimum required symbols.'), t('Constraint'));
    $this->assertTrue($this->checkPolicy('&a$'), t('Symbol count constraint passes with more than required symbols.'), t('Constraint'));
  }

  /**
   * Tests username constraint.
   */
  public function testUsernameConstraint() {
    $config = array('username' => array(
      'enabled' => TRUE,
    ));
    $this->createTestPolicy($config);
    $this->assertFalse($this->checkPolicy($this->account->name), t('Username constraint fails with username present.'), t('Constraint'));
    $this->assertTrue($this->checkPolicy(''), t('Username constraint passes with username absent.'), t('Constraint'));
  }

  protected function checkPolicy($pass, $account = NULL) {
    if ($account == NULL) {
      $account = $this->account;
    }

    $errors = $this->policy->check($pass, $account);
    return count($errors) == 0;
  }

}

/**
 * Test class to verify accuracy of each available policy condition.
 */
class PasswordPolicyConditionsTestCase extends PasswordPolicyTestCase {

  /**
   * Implements DrupalWebTestCase::getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Conditions Test',
      'description' => t('Assure that password policy conditions work.'),
      'group' => 'Password Policy',
    );
  }

  /**
   * Implements DrupalWebTestCase::setUp().
   */
  public function setUp() {
    parent::setUp('password_policy', 'password_policy_test');
    $this->account = $this->drupalCreateUser();
  }

  /**
   * Tests role condition.
   */
  public function testRoleCondition() {
    $rid = $this->drupalCreateRole(array());
    $config = array('role' => array(
      'roles' => array(
        $rid => 1,
      ),
    ));
    $this->createTestPolicy($config);
    $this->assertFalse($this->matchPolicy(), t('Role condition fails with unprivileged account.'), t('Condition'));

    // Add role to user in order to match the condition.
    $this->account->roles[$rid] = 'test role';
    $this->assertTrue($this->matchPolicy(), t('Role condition passes with privileged account.'), t('Condition'));
  }

  protected function matchPolicy($account = NULL) {
    if ($account == NULL) {
      $account = $this->account;
    }

    return $this->policy->match($account);
  }

}

/**
 * Test class to verify accuracy of each available policy condition.
 */
class PasswordPolicyTestUICase extends DrupalWebTestCase {

  /**
   * Implements DrupalWebTestCase::getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Password Policy UI',
      'description' => t('Test the Password Policy user interface.'),
      'group' => 'Password Policy',
    );
  }

  public function setUp() {
    parent::setUp('password_policy', 'password_policy_test');
    // Include ctools export so Password Policies can be created progammatically.
    ctools_include('export');
  }

  protected function createStrongPolicy() {
    // Setup strong policy.
    $password_policy = new stdClass();
    $password_policy->disabled = FALSE;
    $password_policy->api_version = 1;
    $password_policy->name = 'strong';
    $password_policy->export_type = NULL;
    $password_policy->config = 'a:9:{s:11:"alpha_count";a:1:{s:11:"alpha_count";s:1:"1";}s:10:"char_count";a:1:{s:10:"char_count";s:1:"8";}s:11:"consecutive";a:1:{s:22:"consecutive_char_count";s:0:"";}s:9:"int_count";a:1:{s:9:"int_count";s:1:"1";}s:14:"past_passwords";a:1:{s:14:"past_passwords";s:1:"2";}s:12:"symbol_count";a:2:{s:12:"symbol_count";s:1:"0";s:20:"symbol_count_symbols";s:30:"!@#$%^&*()_+=-|}{"?:><,./;\'\\[]";}s:8:"username";a:1:{s:7:"enabled";b:1;}s:4:"role";a:1:{s:5:"roles";a:2:{i:2;i:0;i:3;i:0;}}s:6:"expire";a:4:{s:12:"expire_limit";s:1:"0";s:25:"expire_warning_email_sent";s:8:"-14 days";s:28:"expire_warning_email_message";s:0:"";s:28:"expire_warning_email_subject";s:92:"[user:name] you password on [site:name] shall expire in [password_expiration_date:interval] ";}}';
    ctools_export_crud_save('password_policy', $password_policy);
  }

  /**
   * Tests password policy enforcement on registration.
   */
  public function testRegistration() {
    // Create strong policy.
    $this->createStrongPolicy();

    // Don't require e-mail verification.
    variable_set('user_email_verification', FALSE);

    // Allow registration by site visitors without administrator approval.
    variable_set('user_register', USER_REGISTER_VISITORS);
    $edit = array();
    $edit['name'] = $name = $this->randomName();
    $edit['mail'] = $mail = $edit['name'] . '@example.com';

    // Try a weak password
    $edit['pass[pass1]'] = 'pass';
    $edit['pass[pass2]'] = 'pass';
    $this->drupalPost('user/register', $edit, t('Create new account'));
    $this->assertText('Password must have at least 1 digit(s).');
    $this->assertText('Password must have at least 8 character(s).');
  }
}

