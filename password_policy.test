<?php
/**
 * @file
 * Unit tests for Password policy module.
 */

/**
 * Basic test class for creating and executing Password Policies.
 */
class PasswordPolicyTestCase extends DrupalWebTestCase {

  /**
   * Implements DrupalWebTestCase::getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Password Policy Test',
      'description' => t('Assure that password policies work.'),
      'group' => 'Password Policy',
    );
  }

  /**
   * Implements DrupalWebTestCase::setUp().
   */
  public function setUp() {
    parent::setUp('password_policy', 'password_policy_test');
    $this->test_user = $this->drupalCreateUser();
    $this->test_policy = new PasswordPolicy();
  }

  /**
   * Tests the creation of an empty policy.
   */
  public function testCreatePolicy() {
    $this->assertNotNull($this->test_policy, t('Test password policy created successfully.'));
  }

  /**
   * Tests the constraints of an empty policy.
   */
  public function testPolicyConstraints() {
    $failures = $this->test_policy->constraint(user_password(), $this->test_user);
    $this->assertTrue(count($failures) == 0, t('Test policy passes with no constraints.'));
  }

  /**
   * Tests the loading of CTools-based policies.
   */
  public function testLoadPolicy() {
    $policies = PasswordPolicy::enabled_policies();
    $this->assertTrue(array_key_exists('Test policy', $policies), t('Test policy exists when loaded via CTools.'));
  }

  /**
   * Tests the constraints of an empty policy.
   */
  public function testPolicyConditions() {
    $this->assertTrue($this->test_policy->match($this->test_user), t('Test policy passes with no conditions.'));
  }

}

/**
 * Test class to verify accuracy of each available policy constraint.
 */
class PasswordPolicyConstraintsTestCase extends DrupalWebTestCase {

  /**
   * Implements DrupalWebTestCase::getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Constraints Test',
      'description' => t('Assure that password policy constraints work.'),
      'group' => 'Password Policy',
    );
  }

  /**
   * Implements DrupalWebTestCase::setUp().
   */
  public function setUp() {
    parent::setUp('password_policy');
    $this->test_user = $this->drupalCreateUser();
    $this->test_policy = new PasswordPolicy();
  }

  /**
   * Tests letter count constraint.
   */
  public function testAlphaCountConstraint() {
    $info = array(
      'name' => 'alpha_count',
      'config' => array('alpha_count' => 1),
    );
    $constraint = new PasswordPolicyConstraint($info, $this->test_policy);
    $this->assertFalse(password_policy_alpha_count_constraint('', $this->test_user, $constraint), t('Letter count constraint fails with less than required letters.'), t('Constraint'));
    $this->assertTrue(password_policy_alpha_count_constraint('a', $this->test_user, $constraint), t('Letter count constraint passes with minimum required letters.'), t('Constraint'));
    $this->assertTrue(password_policy_alpha_count_constraint('aa', $this->test_user, $constraint), t('Letter count constraint passes with more than required letters.'), t('Constraint'));
  }

  /**
   * Tests character count constraint.
   */
  public function testCharCountConstraint() {
    $info = array(
      'name' => 'char_count',
      'config' => array('char_count' => 1),
    );
    $constraint = new PasswordPolicyConstraint($info, $this->test_policy);
    $this->assertFalse(password_policy_char_count_constraint('', $this->test_user, $constraint), t('Character count constraint fails with less than required characters.'), t('Constraint'));
    $this->assertTrue(password_policy_char_count_constraint('a', $this->test_user, $constraint), t('Character count constraint passes with minimum required characters.'), t('Constraint'));
    $this->assertTrue(password_policy_char_count_constraint('aa', $this->test_user, $constraint), t('Character count constraint passes with more than required characters.'), t('Constraint'));
  }

  /**
   * Tests consecutive count constraint.
   */
  public function testConsecutiveConstraint() {
    $info = array(
      'name' => 'consecutive',
      'config' => array('consecutive_char_count' => 1),
    );
    $constraint = new PasswordPolicyConstraint($info, $this->test_policy);
    $this->assertTrue(password_policy_consecutive_constraint('', $this->test_user, $constraint), t('Consecutive character count constraint passes with less than maximum consecutive characters.'), t('Constraint'));
    $this->assertFalse(password_policy_consecutive_constraint('1', $this->test_user, $constraint), t('Consecutive character count constraint fails with exact maximum consecutive characters.'), t('Constraint'));
    $this->assertFalse(password_policy_consecutive_constraint('11', $this->test_user, $constraint), t('Consecutive character count constraint fails with more than maximum consecutive characters.'), t('Constraint'));
  }

  /**
   * Tests integer count constraint.
   */
  public function testIntCountConstraint() {
    $info = array(
      'name' => 'int_count',
      'config' => array('int_count' => 1),
    );
    $constraint = new PasswordPolicyConstraint($info, $this->test_policy);
    $this->assertFalse(password_policy_int_count_constraint('', $this->test_user, $constraint), t('Integer count constraint fails with less than required integers.'), t('Constraint'));
    $this->assertTrue(password_policy_int_count_constraint('1', $this->test_user, $constraint), t('Integer count constraint passes with minimum required integers.'), t('Constraint'));
    $this->assertTrue(password_policy_int_count_constraint('11', $this->test_user, $constraint), t('Integer count constraint passes with more than required integers.'), t('Constraint'));
  }

  /**
   * Tests symbol count constraint.
   */
  public function testSymbolCountConstraint() {
    $info = array(
      'name' => 'symbol_count',
      'config' => array('symbol_count' => 1),
    );
    $constraint = new PasswordPolicyConstraint($info, $this->test_policy);
    $this->assertFalse(password_policy_symbol_count_constraint('', $this->test_user, $constraint), t('Symbol count constraint fails with less than required symbols.'), t('Constraint'));
    $this->assertTrue(password_policy_symbol_count_constraint('$', $this->test_user, $constraint), t('Symbol count constraint passes with minimum required symbols.'), t('Constraint'));
    $this->assertTrue(password_policy_symbol_count_constraint('$$', $this->test_user, $constraint), t('Symbol count constraint passes with more than required symbols.'), t('Constraint'));
  }

  /**
   * Tests username constraint.
   */
  public function testUsernameConstraint() {
    $info = array(
      'name' => 'username',
      'config' => array('enabled' => TRUE),
    );
    $constraint = new PasswordPolicyConstraint($info, $this->test_policy);
    $this->assertFalse(password_policy_username_constraint($this->test_user->name, $this->test_user, $constraint), t('Username constraint fails with username present.'), t('Constraint'));
    $this->assertTrue(password_policy_username_constraint('', $this->test_user, $constraint), t('Username constraint passes with username absent.'), t('Constraint'));
  }

}
