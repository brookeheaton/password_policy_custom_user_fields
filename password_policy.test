<?php
/**
 * @file
 * Unit tests for Password policy module.
 */

/**
 * Basic test class for creating and executing Password Policies.
 */
class PasswordPolicyTestCase extends DrupalWebTestCase {

  /**
   * Implements DrupalWebTestCase::getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Password Policy Test',
      'description' => t('Assure that password policies work.'),
      'group' => 'Password Policy',
    );
  }

  /**
   * Implements DrupalWebTestCase::setUp().
   */
  public function setUp() {
    parent::setUp('password_policy', 'password_policy_test');
    $this->account = $this->drupalCreateUser();
    $this->test_policy = new PasswordPolicy();
  }

  /**
   * Tests the creation of an empty policy.
   */
  public function testCreatePolicy() {
    $this->assertNotNull($this->test_policy, t('Test password policy created successfully.'));
  }

  /**
   * Tests the constraints of an empty policy.
   */
  public function testPolicyConstraints() {
    $failures = $this->test_policy->constraint(user_password(), $this->account);
    $this->assertTrue(count($failures) == 0, t('Test policy passes with no constraints.'));
  }

  /**
   * Tests the loading of CTools-based policies.
   */
  public function testLoadPolicy() {
    $policies = PasswordPolicy::enabled_policies();
    $this->assertTrue(array_key_exists('Test policy', $policies), t('Test policy exists when loaded via CTools.'));
  }

  /**
   * Tests the constraints of an empty policy.
   */
  public function testPolicyConditions() {
    $this->assertTrue($this->test_policy->match($this->account), t('Test policy passes with no conditions.'));
  }

}

/**
 * Test class to verify accuracy of each available policy constraint.
 */
class PasswordPolicyConstraintsTestCase extends DrupalWebTestCase {

  /**
   * Implements DrupalWebTestCase::getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Constraints Test',
      'description' => t('Assure that password policy constraints work.'),
      'group' => 'Password Policy',
    );
  }

  /**
   * Implements DrupalWebTestCase::setUp().
   */
  public function setUp() {
    parent::setUp('password_policy', 'password_policy_test');
    $this->account = $this->drupalCreateUser();
  }

  /**
   * Tests letter count constraint.
   */
  public function testAlphaCountConstraint() {
    $config = array('alpha_count' => array(
      'alpha_count' => 1,
    ));
    $policy = $this->createTestPolicy($config);
    $this->assertFalse($policy->constraint('', $this->account), t('Letter count constraint fails with less than required letters.'), t('Constraint'));
    $this->assertTrue($policy->constraint('a', $this->account), t('Letter count constraint passes with minimum required letters.'), t('Constraint'));
    $this->assertTrue($policy->constraint('aa', $this->account), t('Letter count constraint passes with more than required letters.'), t('Constraint'));
  }

  /**
   * Tests character count constraint.
   */
  public function testCharCountConstraint() {
    $config = array('char_count' => array(
      array('char_count' => 1),
    ));
    $policy = $this->createTestPolicy($config);
    $this->assertFalse($policy->constraint('', $this->account), t('Character count constraint fails with less than required characters.'), t('Constraint'));
    $this->assertTrue($policy->constraint('a', $this->account), t('Character count constraint passes with minimum required characters.'), t('Constraint'));
    $this->assertTrue($policy->constraint('aa', $this->account), t('Character count constraint passes with more than required characters.'), t('Constraint'));
  }

  /**
   * Tests consecutive count constraint.
   */
  public function testConsecutiveConstraint() {
    $config = array('consecutive' => array(
      array('consecutive_char_count' => 1),
    ));
    $policy = $this->createTestPolicy($config);
    $this->assertTrue($policy->constraint('', $this->account), t('Consecutive character count constraint passes with less than maximum consecutive characters.'), t('Constraint'));
    $this->assertFalse($policy->constraint('1', $this->account), t('Consecutive character count constraint fails with exact maximum consecutive characters.'), t('Constraint'));
    $this->assertFalse($policy->constraint('11', $this->account), t('Consecutive character count constraint fails with more than maximum consecutive characters.'), t('Constraint'));
  }

  /**
   * Tests integer count constraint.
   */
  public function testIntCountConstraint() {
    $config = array('int_count' => array(
        array('int_count' => 1),
    ));
    $policy = $this->createTestPolicy($config);
    $this->assertFalse($policy->constraint('', $this->account), t('Integer count constraint fails with less than required integers.'), t('Constraint'));
    $this->assertTrue($policy->constraint('1', $this->account), t('Integer count constraint passes with minimum required integers.'), t('Constraint'));
    $this->assertTrue($policy->constraint('11', $this->account), t('Integer count constraint passes with more than required integers.'), t('Constraint'));
  }

  /**
   * Tests symbol count constraint.
   */
  public function testSymbolCountConstraint() {
    $config = array('symbol_count' => array(
      'symbol_count' => 1,
    ));
    $policy = $this->createTestPolicy($config);
    $this->assertFalse($policy->constraint('', $this->account), t('Symbol count constraint fails with less than required symbols.'), t('Constraint'));
    $this->assertTrue($policy->constraint('$', $this->account), t('Symbol count constraint passes with minimum required symbols.'), t('Constraint'));
    $this->assertTrue($policy->constraint('$$', $this->account), t('Symbol count constraint passes with more than required symbols.'), t('Constraint'));
  }

  /**
   * Tests username constraint.
   */
  public function testUsernameConstraint() {
    $config = array('username' => array(
      'enabled' => TRUE,
    ));
    $policy = $this->createTestPolicy($config);
    $this->assertFalse($policy->constraint($this->account->name, $this->account), t('Username constraint fails with username present.'), t('Constraint'));
    $this->assertTrue($policy->constraint('', $this->account), t('Username constraint passes with username absent.'), t('Constraint'));
  }

  protected function createTestPolicy($config) {
    $policy = new stdClass();
    $policy->disabled = FALSE;
    $policy->api_version = 1;
    $policy->name = 'Test policy';
    $policy->config = serialize($config);

    $policy = new PasswordPolicy($password_policy);
    return $policy;
  }

}
