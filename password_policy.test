<?php
/**
 * @file
 * Unit tests for Password policy module.
 */

/**
 * Basic test class for creating and executing Password Policies.
 */
class PasswordPolicyTestCase extends DrupalWebTestCase {

  /**
   * Implements DrupalWebTestCase::getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Password Policy Test',
      'description' => t('Assure that password policies work.'),
      'group' => 'Password Policy',
    );
  }

  /**
   * Implements DrupalWebTestCase::setUp().
   */
  public function setUp() {
    parent::setUp('password_policy', 'ctools');
    $this->test_user = $this->drupalCreateUser();
    $this->test_policy = new PasswordPolicy(ctools_export_crud_new('password_policy'));
  }

  /**
   * Tests the creation of an empty policy.
   */
  public function testCreatePolicy() {
    $this->assertNotNull($this->test_policy, t('Test password policy created successfully.'));
  }

  /**
   * Tests the constraints of an empty policy.
   */
  public function testPolicyConstraints() {
    $this->assertTrue(count($this->test_policy->constraint(user_password(), $this->test_user)), t('Test policy passes with no constraints.'));
  }

  /**
   * Tests the constraints of an empty policy.
   */
  public function testPolicyConditions() {
    $this->assertTrue($this->test_policy->match($this->test_user), t('Test policy passes with no conditions.'));
  }

}

/**
 * Test class to verify accuracy of each available policy constraint.
 */
class PasswordPolicyConstraintsTestCase extends DrupalWebTestCase {

  /**
   * Implements DrupalWebTestCase::getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Constraints Test',
      'description' => t('Assure that password policy constraints work.'),
      'group' => 'Password Policy',
    );
  }

  /**
   * Implements DrupalWebTestCase::setUp().
   */
  public function setUp() {
    parent::setUp('password_policy', 'ctools');
    $this->test_user = $this->drupalCreateUser();
    $this->test_policy = new PasswordPolicy(ctools_export_crud_new('password_policy'));
  }

  /**
   * Tests letter count constraint.
   */
  public function testAlphaCountConstraint() {
    $info = array(
      'name' => 'alpha_count',
      'config' => array('alpha_count' => 1),
    );
    $constraint = new PasswordPolicyConstraint($info, $this->test_policy);
    $this->assertFalse(password_policy_alpha_count_constraint('', $this->test_user, $constraint), t('Letter count constraint passes with less than required letters.'), t('Constraint'));
    $this->assertTrue(password_policy_alpha_count_constraint('a', $this->test_user, $constraint), t('Letter count constraint passes with minimum required letters.'), t('Constraint'));
    $this->assertTrue(password_policy_alpha_count_constraint('aa', $this->test_user, $constraint), t('Letter count constraint passes with more than required letters.'), t('Constraint'));
  }

  /**
   * Tests character count constraint.
   */
  public function testCharCountConstraint() {
    $info = array(
      'name' => 'char_count',
      'config' => array('char_count' => 1),
    );
    $constraint = new PasswordPolicyConstraint($info, $this->test_policy);
    $this->assertFalse(password_policy_char_count_constraint('', $this->test_user, $constraint), t('Character count constraint passes with less than required characters.'), t('Constraint'));
    $this->assertTrue(password_policy_char_count_constraint('a', $this->test_user, $constraint), t('Character count constraint passes with minimum required characters.'), t('Constraint'));
    $this->assertTrue(password_policy_char_count_constraint('aa', $this->test_user, $constraint), t('Character count constraint passes with more than required characters.'), t('Constraint'));
  }

  /**
   * Tests integer count constraint.
   */
  public function testIntCountConstraint() {
    $info = array(
      'name' => 'int_count',
      'config' => array('int_count' => 1),
    );
    $constraint = new PasswordPolicyConstraint($info, $this->test_policy);
    $this->assertFalse(password_policy_int_count_constraint('', $this->test_user, $constraint), t('Integer count constraint passes with less than required integers.'), t('Constraint'));
    $this->assertTrue(password_policy_int_count_constraint('1', $this->test_user, $constraint), t('Integer count constraint passes with minimum required integers.'), t('Constraint'));
    $this->assertTrue(password_policy_int_count_constraint('11', $this->test_user, $constraint), t('Integer count constraint passes with more than required integers.'), t('Constraint'));
  }

}
