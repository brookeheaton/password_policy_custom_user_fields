<?php
/**
 * @file password_policy2.module
 * TODO: Enter file description here.
 */

/**
 * Implements hook_menu().
 */
function password_policy2_menu() { 
  // This is the minimum information you can provide for a menu item.
  $items['admin/config/people/pp2'] = array(
    'title' => 'PP2',
    'page callback' => 'pp2',
    'access callback' => TRUE,
    'access arguments' => array('TODO: Enter user permissions'),
  );
  // more complex menu item
  $items['password_policy2/check'] = array(
    'title' => 'TODO: Enter menu item title',
    'description' => 'TODO: Enter description',
    'page callback' => 'password_policy2_ajax_check',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK, // One of MENU_NORMAL_ITEM / MENU_CALLBACK / MENU_SUGGESTED_ITEM / MENU_LOCAL_TASK / MENU_DEFAULT_LOCAL_TASK
  );
  // OPTIONAL: Fill in additional static menu items

  return $items;
}

function password_policy2_ajax_check() {
  $password = $_GET['password'];
  $a = array("test" => "bob");
  //useing this user is not always going to work;
  global $user;
  $account = $user;
  $policies = PasswordPolicy::matched_policies($account);
  $total = 0 ;
  $errors = array();
  foreach($policies as $policy) {

    $total += count($policy->message());
    $errors = $errors + $policy->constraint($password, $account);
  }
  $sus_count = $total - count($errors);

  $score = ($sus_count / $total) * 100;
  $msg = '';

  if(!empty($errors)) {
    $msg = theme('item_list', array('items' => $errors));
  }
  $return = array(
    'msg' => $msg,
    'strength' => $score,
    'indicatorText' => "$sus_count of $total",
  );

  drupal_json_output($return);
}


function pp2() {
  $policy = new PasswordPolicy();
  //$a = ctools_plugin_get_plugin_type_info();
  //debug($a['password_policy2']);
  $form = array();
  $form_state = array();
//drupal_install_schema('password_policy2');
  return 'bob';
}

/**
 * implements hook_ctools_plugin_type
 */
function password_policy2_ctools_plugin_type() {
  return array(
    'constraint' => array(
     'defaults' => array(
       'class' => 'PasswordPolicyConstraint',
      ),
    ),
    'condition'=>  array(
      'defaults' => array(
        'class' => 'PasswordPolicyCondition',
      ),
    ),
  );
}

function password_policy2_ctools_plugin_directory($module, $plugin) {
  if ($module == 'password_policy2') {
   return "plugins/$plugin";
  }
  if ($module == 'ctools') {
   return "plugins/$plugin";
  }
}

function password_policy2_admin_settings(&$form, &$form_state) {
  $item = $form_state['item'];
  $policy = new PasswordPolicy($item);
  $form = $policy->admin_form($form, $form_state);
  $form_state['policy'] = $policy;
  return $form;
}
function password_policy2_admin_validate(&$form, &$form_state) {
  return TRUE;
}

function password_policy2_admin_submit(&$form, &$form_state) {
  $policy = $form_state['policy'];
  $policy->admin_form_submit($form, $form_state);
}

function password_policy2_password_element_alter(&$element, $account) {
 $policies = PasswordPolicy::matched_policies($account);
 $items = array();
 foreach($policies as $policy) {
   $items = $items + $policy->message();
 }
 $element['#description'] .= theme('item_list', array('items' => $items));
}
function password_policy2_form_user_profile_form_alter(&$form, $form_state) {
  password_policy2_password_element_alter($form['account']['pass'], $form['#user']);
  drupal_add_js(drupal_get_path("module", 'password_policy2') ."/password_policy2.js");
  $form['#validate'][] = 'password_policy2_user_profile_form_validate';
  $form['#submit'][] = 'password_policy2_password_submit';
}

function password_policy2_user_profile_form_validate($form, &$form_state) {
 if(!empty($form_state['values']['pass'])) {
   $account = $form['#user'];
   $policies = PasswordPolicy::matched_policies($account);
   $errors = array();
   foreach($policies as $policy) {
     $errors = $errors + $policy->constraint($form_state['values']['pass'], $account);
   }
   if(!empty($errors)) {
     form_set_error('pass', theme('item_list', array('items' => $errors)));
   }
  }
}

/**
 *  * Stores user password hash.
 *   *
 *    * @param $uid
 *     *   User id.
 *      * @param $pass
 *       *   Clear text password.
 *        */
function _password_policy2_store_password($uid, $pass) {
  dpm("insert");
  db_insert('password_policy2_history')
    ->fields(array(
      'uid' => $uid,
      'pass' => user_hash_password($pass),
      'created' => time(),
    ))
    ->execute();
}

/**
 * Implements hook_user_insert().
 */
function password_policy_user_insert(&$edit, $account, $category) {
  if (!empty($edit['pass'])) {
    // New users do not yet have an uid during the validation step, but they do have at this insert step.
    // Store their first password in the system for use with the history constraint (if used).
    if ($account->uid) {
      _password_policy2_store_password($account->uid, $edit['pass']);
    }
  }
}


/**
 * Password save submit handler.
 */
function password_policy2_password_submit($form, &$form_state) {
  global $user;

  $values = $form_state['values'];
  $account = isset($form['#user']) ? $form['#user'] : (object)array('uid' => 0);

  // Track the hashed password values which can then be used in the history constraint.
  if ($account->uid && !empty($values['pass'])) {
    _password_policy2_store_password($account->uid, $values['pass']);
  }
}
