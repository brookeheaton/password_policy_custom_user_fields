<?php
/**
 * @file password_policy2.module
 * TODO: Enter file description here.
 */

/**
 * Implements hook_menu().
 */
function password_policy2_menu() { 
  // This is the minimum information you can provide for a menu item.
  $items['admin/config/people/pp2'] = array(
    'title' => 'PP2',
    'page callback' => 'pp2',
    'access callback' => TRUE,
    'access arguments' => array('TODO: Enter user permissions'),
  );
  // more complex menu item
  $items['password_policy2/foo'] = array(
    'title' => 'TODO: Enter menu item title',
    'description' => 'TODO: Enter description',
    'page callback' => 'TODO: Enter callback function',
    'page arguments' => '', // An array of arguments to pass to the page callback function. Integer values pass the corresponding URL component.
    'access callback' => '', // defaults to user_access()
    'access arguments' => array('TODO: Enter user permissions'),
    'weight' => 0,
    'type' => MENU_NORMAL_ITEM, // One of MENU_NORMAL_ITEM / MENU_CALLBACK / MENU_SUGGESTED_ITEM / MENU_LOCAL_TASK / MENU_DEFAULT_LOCAL_TASK
    'menu_name' => '', // Menu to place this item in.
    'title callback' => '', // Function to generate the title, defaults to t(). 
    'title arguments' => '', // Arguments to send to t() or your custom callback. 
  );
  // OPTIONAL: Fill in additional static menu items

  return $items;
}

function pp2() {
  $policy = new PasswordPolicy();
  //$a = ctools_plugin_get_plugin_type_info();
  //debug($a['password_policy2']);
  $form = array();
  $form_state = array();
//drupal_install_schema('password_policy2');
  return 'bob';
}

/**
 * implements hook_ctools_plugin_type
 */
function password_policy2_ctools_plugin_type() {
  return array(
    'constraint' => array(
     'defaults' => array(
       'class' => 'PasswordPolicyConstraint',
      ),
    ),
    'condition'=>  array(
      'defaults' => array(
        'class' => 'PasswordPolicyCondition',
      ),
    ),
  );
}

function password_policy2_ctools_plugin_directory($module, $plugin) {
  if ($module == 'password_policy2') {
   return "plugins/$plugin";
  }
  if ($module == 'ctools') {
   return "plugins/$plugin";
  }
}

function password_policy2_admin_settings(&$form, &$form_state) {
  $item = $form_state['item'];
  $policy = new PasswordPolicy($item);
  $form = $policy->admin_form($form, $form_state);
  $form_state['policy'] = $policy;
  return $form;
}
function password_policy2_admin_validate(&$form, &$form_state) {
  return TRUE;
}

function password_policy2_admin_submit(&$form, &$form_state) {
  $policy = $form_state['policy'];
  $policy->admin_form_submit($form, $form_state);
}

function password_policy2_password_element_alter(&$element, $account) {
 $policies = PasswordPolicy::matched_policies($account);
 $items = array();
 foreach($policies as $policy) {
   $items = $items + $policy->message();
 }
 $element['#description'] .= theme('item_list', array('items' => $items));
}
function password_policy2_form_user_profile_form_alter(&$form, $form_state) {
 password_policy2_password_element_alter($form['account']['pass'], $form['#user']);
 $form['#validate'][] = 'password_policy2_user_profile_form_validate';
}

function password_policy2_user_profile_form_validate($form, &$form_state) {
 if(!empty($form_state['values']['pass'])) {
   $account = $form['#user'];
   $policies = PasswordPolicy::matched_policies($account);
   $errors = array();
   foreach($policies as $policy) {
     $errors = $errors + $policy->constraint($form_state['values']['pass'], $account);
   }
   if(!empty($errors)) {
     form_set_error('pass', theme('item_list', array('items' => $errors)));
   }
  }
}
